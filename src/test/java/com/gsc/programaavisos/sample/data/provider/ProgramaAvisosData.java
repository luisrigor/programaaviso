package com.gsc.programaavisos.sample.data.provider;

import com.gsc.programaavisos.dto.FilterBean;
import com.gsc.programaavisos.dto.PADTO;
import com.gsc.programaavisos.dto.SearchPADTO;
import com.gsc.programaavisos.model.crm.entity.Calls;
import com.gsc.programaavisos.model.crm.entity.ProgramaAvisos;
import com.gsc.programaavisos.model.crm.entity.ProgramaAvisosBean;
import com.gsc.ws.core.maintenancecontract.MaintenanceContract;

import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.Year;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;

public class ProgramaAvisosData {

    public static FilterBean getFilterBean() {
        return FilterBean.builder()
                .fromYear(2022)
                .toYear(2023)
                .fromMonth(1)
                .toMonth(12)
                .vecDealers(new ArrayList<>())
                .arrSelDealer(new String[]{"DEALER123", "DEALER456"})
                .arrSelDealerToString("DEALER123, DEALER456")
                .changedList(new LinkedHashMap<>())
                .changedBy("John")
                .GSCUserLogin("user123")
                .idSource(1)
                .idChannel(2)
                .idContactType(3)
                .flagHibrid("Yes")
                .delegators(new ArrayList<>())
                .delegatedTo("Jane")
                .statePending(1)
                .stateHasSchedule(0)
                .stateScheduleDone(0)
                .stateScheduleRejected(0)
                .stateNotOwner(0)
                .stateAstContactsClient(1)
                .stateClientScheduledAtWorkshop(1)
                .stateShowRemovedManually(0)
                .stateShowRemovedAutoByManut(0)
                .stateShowRemovedAutoByPeriod(0)
                .arrSelMaintenanceTypes(new String[]{"TypeA", "TypeB"})
                .arrSelMaintenanceTypesToString("TypeA, TypeB")
                .hasMaintenanceContract("Yes")
                .missedCalls("No")
                .plate("ABC123")
                .idClientType(4)
                .showImportByExcell(true)
                .firstPage(1)
                .currPage(1)
                .lastPage(10)
                .orderColumn("columnName")
                .orderOrientation("ASC")
                .owner("OwnerName")
                .build();
    }

    public static ProgramaAvisos getCompletePA() {
        return ProgramaAvisos.builder()
                .id(1)
                .idSource(1)
                .idDocument("DOC123")
                .idChannel(1)
                .idContactType(1)
                .idClientType(1)
                .idClientOrigin(1)
                .idStatus(1)
                .year(2023)
                .month(8)
                .day(11)
                .oidDealer("DEALER123")
                .licensePlate("ABC123")
                .vin("VIN123")
                .brand("Toyota")
                .model("Corolla")
                .nif("123456789A")
                .name("John Doe")
                .address("123 Main St")
                .cp4("1234")
                .cp3("567")
                .cpext("A")
                .contactPhone("123-456-7890")
                .email("johndoe@example.com")
                .dataIsCorrect("Yes")
                .newNif("987654321B")
                .newName("Jane Smith")
                .newAddress("456 Elm St")
                .newAddressNumber("789")
                .newFloor("2nd Floor")
                .newCp4("5678")
                .newCp3("890")
                .newCpExt("B")
                .newContactPhone("987-654-3210")
                .newEmail("janesmith@example.com")
                .successContact("Success")
                .successMotive("Achievement")
                .dtScheduleContact(new Date())
                .hrScheduleContact(new Time(System.currentTimeMillis()))
                .revisionSchedule("Scheduled")
                .revisionScheduleMotive("Routine check")
                .revisionScheduleMotive2("Second motive")
                .observations("Observations here")
                .removedObs("Removed observations")
                .delegatedTo("Delegated to someone")
                .client("Client information")
                .blockedBy("Blocked by someone")
                .visible("Yes")
                .dtVisible(new Date())
                .createdBy("John")
                .dtCreated(new Timestamp(System.currentTimeMillis()))
                .changedBy("Jane")
                .dtChanged(new Timestamp(System.currentTimeMillis()))
                .nrMissedCalls(2)
                .nrCalls(5)
                .idLastCall(10)
                .idClaim(20)
                .receiveInformation("Information received")
                .idClientChannelPreference(3)
                .oidNewsletter("NEWS123")
                .newsletterPersonalData("Newsletter data")
                .oidDealerSchedule("DEALER456")
                .dtSchedule(new Date())
                .hrSchedule(new Time(System.currentTimeMillis()))
                .owner("Owner name")
                .recoveryAndShipping("Recovery and shipping details")
                .idOrigin(4)
                .extIDInOrigin(123)
                .warningPriority(1)
                .build();
    }

    public static PADTO getPADTO() {
        return PADTO.builder()
                .id(1)
                .contactChanged("Yes")
                .dataIsCorrect("Correct")
                .newNif("987654321B")
                .newName("Jane Smith")
                .newAddress("456 Elm St")
                .newAddressNumber("789")
                .newFloor("2nd Floor")
                .newCp4("5678")
                .newCp3("890")
                .newCpExt("B")
                .newContactPhone("987-654-3210")
                .newEmail("janesmith@example.com")
                .successContact("Successful")
                .successMotive("Accomplishment")
                .dtScheduleContact("2023-08-11")
                .hrScheduleContact("15:30:00")
                .recoveryAndShipping("Recovery details")
                .revisionSchedule("Scheduled")
                .revisionScheduleMotive("Routine")
                .km("10000")
                .geralRevisionScheduleMotive2("Secondary motive")
                .newsletterReceived("Received")
                .notReceivedMotive("Not received")
                .idClientChannelPreference("2")
                .observations("Observations here")
                .registerClaim("Yes")
                .sendSchedule("Scheduled")
                .oidDealerSchedule("DEALER789")
                .dtSchedule("2023-08-15")
                .hrHrSchedule("14")
                .minHrSchedule("30")
                .build();
    }

    public static SearchPADTO getSearchPADTO() {
        return SearchPADTO.builder()
                .fromYear(2022)
                .fromMonth(1)
                .toYear(2023)
                .toMonth(12)
                .arrOidDealer(new String[]{"DEALER123", "DEALER456"})
                .changedBy("John")
                .idSource(1)
                .idChannel(2)
                .idContactType(3)
                .flagHibrid("Yes")
                .delegatedTo("Jane")
                .filterOptions(new String[]{"OptionA", "OptionB"})
                .arrMaintenanceTypes(new String[]{"TypeA", "TypeB"})
                .hasMaintenanceContract("Yes")
                .mrsMissedCalls("No")
                .plate("ABC123")
                .flag5Plus("Flag")
                .idClientType(4)
                .showImportByExcell("true")
                .filterOwner("OwnerName")
                .build();
    }

    public static ProgramaAvisosBean getProgramaAvisosBean(){
        return ProgramaAvisosBean.builder()
                .id(1)
                .idSource(2)
                .idDocument("D001")
                .idChannel(3)
                .idContactType(4)
                .idClientType(5)
                .year(2023)
                .month(8)
                .day(30)
                .oidDealer("OID123")
                .oidDealerSchedule("OID456")
                .vin("VIN123")
                .licensePlate("ABC123")
                .brand("Toyota")
                .model("Camry")
                .nif("123456789")
                .name("John Doe")
                .address("123 Main St")
                .cp4("1234")
                .cp3("567")
                .cpExt("ABC")
                .contactPhone("555-123-4567")
                .email("john@example.com")
                .dataIsCorrect("Y")
                .idClientChannelPreference(6)
                .idClientOrigin(7)
                .idStatus(8)
                .receiveInformation("Yes")
                .successContact("Yes")
                .newAddress("456 Elm St")
                .newAddressNumber("789")
                .newContactPhone("555-987-6543")
                .newCp3("789")
                .newCp4("5678")
                .newCpExt("XYZ")
                .newEmail("jane@example.com")
                .newFloor("Apt 101")
                .newName("Jane Smith")
                .newNif("987654321")
                .blockedBy("Blocked by XYZ")
                .successMotive("Successful")
                .dtScheduleContact(new Date())
                .revisionSchedule("Monthly")
                .revisionScheduleMotive("Routine Checkup")
                .revisionScheduleMotive2("None")
                .recoveryAndShipping("Shipping Required")
                .observations("Observation 1")
                .removedObs("Removed Obs 1")
                .delegatedTo("Delegate 1")
                .client("Client 1")
                .nrMissedCalls(2)
                .nrCalls(5)
                .idLastCall(9)
                .visible("Yes")
                .dtVisible(new Date())
                .idClaim(10)
                .oidNewsletter("OIDNewsletter123")
                .newsletterPersonalData("Personal Data")
                .dtSchedule(new Date())
                .idOrigin(11)
                .extIDInOrigin(12)
                .createdBy("User123")
                .dtCreated("2023-08-30")
                .owner("Owner123")
                .hrScheduleContact(Time.valueOf("10:00:00"))
                .changedBy("User456")
                .dtChanged(new Timestamp(System.currentTimeMillis()))
                .nextRevision("2023-09-30")
                .yearNextRevision(2023)
                .monthNextRevision(9)
                .dtNextRevision(new Date())
                .dtItv(new Date())
                .maintenancePrice(100.0)
                .euroCare("Yes")
                .flag5Plus('Y')
                .flagMaintenanceContract('Y')
                .flagHybrid('N')
                .acessoryCodeOne("ACC001")
                .acessoryOne("Accessory 1")
                .acessoryCodeTwo("ACC002")
                .acessoryTwo("Accessory 2")
                .serviceCodeOne("SVC001")
                .serviceOne("Service 1")
                .serviceCodeTwo("SVC002")
                .serviceTwo("Service 2")
                .serviceCodeThree("SVC003")
                .serviceThree("Service 3")
                .cmkDmv1("CMK-DMV-001")
                .cmkDmv1DtEnd(new Date())
                .cmkDmv1Image("cmk-dmv-001.jpg")
                .cmkDav2("CMK-DAV-002")
                .cmkDav2DtEnd(new Date())
                .cmkDav2Image("cmk-dav-002.jpg")
                .maintenancePlan("Plan A")
                .sendType("Email")
                .extraCarePlusCostPrice(50.0)
                .extraCarePlusDateLimit(new Date())
                .description("Description 1")
                .expectedDate("2023-09-15")
                .dealer(OtherFlowData.getDealer())
                .technicalCampaigns(new ArrayList<>())
                .revisions(new ArrayList<>())
                .warranties(new ArrayList<>())
                .eCareNotifications(new ArrayList<>())
                .eCareAllNotifications(new ArrayList<>())
                .claims(new ArrayList<>())
                .rpts(new ArrayList<>())
                .extracare("Extra Care")
                .dtNextIUC("2023-12-31")
                .dtStartNextITV("2023-09-01")
                .dtNextItv("2023-12-31")
                .maintenanceContract(new MaintenanceContract())
                .tecnicalModel("Model XYZ")
                .indiceCSToyota(42)
                .hHCProductId("HHC-001")
                .hHCProductDescription("HHC Product 1")
                .hHCDisplayName("HHC Display 1")
                .hHCDtStart("2023-01-01")
                .hHCDtEnd("2023-12-31")
                .hHCKmEnd("50000")
                .warningPriority(1)
                .dtFinishContract(new Date())
                .techicalCampaignCode("TC-001")
                .techicalCampaignSendDate1(new Date())
                .generationDate(new Date())
                .tcSendDate2(new Date())
                .build();
    }

    public static Calls getCalls(){
        return Calls.builder()
                .id(OtherFlowData.RANDOM_ID)
                .idPaData(OtherFlowData.RANDOM_ID+1)
                .successContact(OtherFlowData.RANDOM_STATUS)
                .successMotive("Successful")
                .dtScheduleContact(new Date())
                .hrScheduleContact(Time.valueOf("10:00:00"))
                .revisionSchedule("Monthly")
                .revisionScheduleMotive("Routine Checkup")
                .revisionScheduleMotive2("None")
                .removedObs("Removed Obs 1")
                .createdBy("User123")
                .dtCreated(LocalDateTime.now())
                .isContactCcRigor(1)
                .recoveryShipping("Shipping Required")
                .build();
    }
}
